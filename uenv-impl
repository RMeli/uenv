#!/usr/bin/env python3

import argparse
import os
import pathlib
import sys

VERSION="0.1-dev"
shell_noop=" :"

# Choose whether to use colored output.
# - by default colored output is ON
# - if the flag --no-color is passed it is OFF
# - if the environment variable NO_COLOR is set it is OFF
def use_colored_output(cli_arg):
    # The --no-color argument overrides all environment variables if passed.
    if cli_arg:
        return False

    # Check the env. var NO_COLOR and disable color if set.
    if os.environ.get('NO_COLOR') is not None:
        color_var = os.environ.get('NO_COLOR')
        if len(color_var)>0 and color_var != "0":
            return False

    return True

def make_argparser():
    parser = argparse.ArgumentParser()
    parser.add_argument('--no-color', action="store_true")
    subparsers = parser.add_subparsers(dest='command')

    start_parser = subparsers.add_parser('start', help='start a user environment')
    start_parser.add_argument('image', help='the environment image to start')

    stop_parser = subparsers.add_parser('stop', help='stop a running user environment')

    return parser

def colorize(string, color):
    colors = {
        "red":     "31",
        "green":   "32",
        "yellow":  "33",
        "blue":    "34",
        "magenta": "35",
        "cyan":    "36",
        "white":   "37",
    }
    if colored_output:
        return f"\033[1;{colors[color]}m{string}\033[0m"
    else:
        return string

def uenv_is_loaded():
    return ("UENV_MOUNT_FILE" in os.environ) and ("UENV_MOUNT_POINT" in os.environ)

def print_error(msg):
    print(f"{colorize('[uenv error]', 'red')} {msg}", file=sys.stderr)

# Generate the command that is passed back to the calling shell based on the
# command line arguments.
def generate_command(args):
    if args.command == 'start':
        return generate_start_command(args)
    elif args.command == 'stop':
        return generate_stop_command(args)

def generate_start_command(args):
    img=args.image
    img_path = pathlib.Path(img)
    if not img_path.is_absolute():
        img_path = pathlib.Path.cwd() / img_path

    if not img_path.is_file():
        print_error(f"the user-environment {colorize(img, 'white')} does not exist")
        return shell_noop
    else:
        return f"squashfs-mount {args.image} /user-environment bash"

def generate_stop_command(args):
    if not uenv_is_loaded():
        print_error(f"there is no running environment to stop")
        return shell_noop

    return "exit 0"

if __name__ == "__main__":
    parser = make_argparser()
    args = parser.parse_args()

    global colored_output
    colored_output = use_colored_output(args.no_color)

    cmd = generate_command(args)

    print(cmd)
